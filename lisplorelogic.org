#+TITLE: Lisp Lore Logic
#+AUTHOR: 147Pm
#+EMAIL: teilchen010.gmail.com
# date ... will set (change) each time (if remembered)
#+DATE: 2017-11-17T14:11:41
#+FILETAGS: :LISPLORELOGIC:
#+LANGUAGE:  en
# #+INFOJS_OPT: view:showall ltoc:t mouse:underline path:http://orgmode.org/org-info.js
#+HTML_HEAD: <link rel="stylesheet" href="../../data/stylesheet.css" type="text/css">
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
#+OPTIONS: H:10 num:4 toc:t \n:nil @:t ::t |:t _:{} *:t ^:{} prop:t
#+OPTIONS: prop:t
#+OPTIONS: tex:t
#+STARTUP: showall
#+STARTUP: align
#+STARTUP: indent
#+STARTUP: entitiespretty
#+STARTUP: logdrawer
#+STARTUP: hidestars

#+html: \(\require{mhchem}\)

* LISP LORE LOGIC


** 2. Elementary Programming
:LOGBOOK:
- [2017-11-26 Sun 10:06] \\
  Latex code for material inference table:
  #+BEGIN_EXAMPLE
  \begin{array}{ c | c || c | c |}
    p & q & p\rightarrow q & \lnot(p\rightarrow q) \\ \hline
    \text T & \text T & \text T & \text F\\
    \text T & \text F & \text F & \text T \\
    \text F & \text T & \text T & \text F \\
    \text F & \text F & \text T & \text F 
  \end{array}
  #+END_EXAMPLE
:END:

\rightarrow 2017-11-21T10:36:38 Logical Implication

The /if---then/ chart

| p | q | (p \Rightarrow q) |
|---+---+---------|
| T | T | T       |
| T | F | F       |
| F | T | T       |
| F | F | T       |
|   |   | <c>     |

This slightly counter-intuitive, actually. The last row means a false premise implies a false conclusion:

\[
x = y \:\Rightarrow\: x + 1 = y + 1 \quad \textrm{e.g.} \quad 2 = 3 \:\Rightarrow\: 2 + 1 = 3 + 1 \\
x = y \:\Rightarrow\: xz = yz \quad \textrm{e.g.} \quad 2 = 3 \:\Rightarrow\: 2\cdot1 = 3\cdot1 \\
\]

One conclusion is /a false statement implies anything/:

/If elephants can fly (false), then the Cubs will win the World Series./ (true)

/If elephants can fly (false), then the Cubs will lose the World Series./ (true)

There is also /causal effect/:

/If $\ce{HCl}$ and $\ce{NaOH}$ are combined, then $\ce{NaCl}$ will be produced./

\[
\ce{HCl + NaOH -> NaCl + H2O}
\]

Both the premise and the conclusion are true, hence, the statement is true. However, in this statement

/If March has 31 days, then dogs are mammals./

the premise has no causal relationship with the conclusion, and yet it is still true simply because both premise and conclusion are true.

The only instance of a logical implication statement being false is the second row where the premise is true and the conclusion is false. This leads to the surprising conclusion that /the negation of an implication is an/ $\textrm{and}$ /statement/. Hence,

\[
\neg \: (p \:\Rightarrow\: q)
\]

is the same as 

\[
(p \:\land\: \neg \: q)
\]

For example, To negate /If I hit my thumb with a hammer, then my thumb will hurt/ is /I hit my thumb with a hammer and my thumb does not hurt/.

| p | q | (p \Rightarrow q) | (\neg(p \Rightarrow q)) | (p \land (\neg q)) |
|---+---+---------+------------+-------------|
| T | T | T       | F          | F           |
| T | F | F       | T          | T           |
| F | T | T       | F          | F           |
| F | F | T       | F          | F           |
|   |   | <c>     | <c>        | <c>         |

Another interesting thing about logical implication is that if we only look at the truth tables, we see how

\[
 (p \:\Rightarrow\: q)
\]

is the same as

\[
((\neg \: p)  \:\lor \: q)
\]

| p | q | (p \Rightarrow q) | ((\neg p) \lor q) | (p \lor q) |
|---+---+---------+-------------+---------|
| T | T | T       | T           | T       |
| T | F | F       | F           | T       |
| F | T | T       | T           | T       |
| F | F | T       | T           | F       |
|   |   | <c>     | <c>         | <c>     |

Lisp has no /implies/ operator, but the fact that we can break logical implication down into ~not~ and ~and~[fn:1] means we can say

#+begin_src lisp :results silent
(defun implies (p q)
  (or (not p) q))
#+end_src

Remember, /true/ is ~t~ and /false/ is ~nil~ in Lisp:

#+begin_src lisp :results raw
(implies t nil)
#+end_src

#+RESULTS:
NIL

#+begin_src lisp 
(implies nil nil)
#+end_src

#+RESULTS:
T

Example: Given four cards...

#+BEGIN_SRC ditaa :exports results :file wasoncards.png :cmdline -s 0.8
+---+  +---+  +---+  +---+
|   |  |   |  |   |  |   |
| E |  | K |  | 4 |  | 7 |
|   |  |   |  |   |  |   |
+---+  +---+  +---+  +---+
#+END_SRC

#+RESULTS:
[[file:/home/hercynian/org/lisp/elisp/wasoncards.png]]

...which cards /must/ we turn over to check conclusively if the statement, /A vowel on one side (p) implies ($\Rightarrow$) an even number is on the other side (q)/ holds for these cards?

We set up the truth table once again:

| p | q | (p \Rightarrow q) |
|---+---+---------|
| T | T | T       |
| T | F | F       |
| F | T | T       |
| F | F | T       |
|   |   | <c>     |

Let us revisit the paradox that in two cases the implication is still /true/ even when the premises were /false/ (rows three and four). So, we begin by turning over /E/, which is definitely make-or-break. Why? Because if there is no even number on the other side, we are done, the implication fails on the very first card. This situation would be reflected by row two, i.e., $p : T, q : F \therefore  (p \:\Rightarrow\: q) : F$. But if it is in fact an even number, row one is applicable, i.e., $p : T, q : T \therefore (p \:\Rightarrow\: q) : T$ and we’re still in the game.

Now, what about the next card /K/? This means the premise is false, $p : F$, because /K/ is not a vowel. So we have the paradox of turning over /K/---and having it not matter if the other side is an even number ($q : T$) or an odd number ($q : F$). In either case the statement is true---in that odd paradoxical way, which in our case means the implication being true is irrelevant. Why is the /K/ card irrelevant? Because the original implication statement is only concerned with what happens when we turn over a vowel. Again, rows three and four are true and this is inconsequential.

So what about the next card /4/? Here we start with the second half of the statement being true, i.e., $q : T$. From our table we see row one might apply---or row three. But again, we’re faced with irrelevant information. Why? If the other side is in fact a vowel ($p : T$), we have learned nothing new, since we already know the other side of /E/ was an even number. Now, what if the other side is a consonant ($p : F$)? Here we have row three, i.e., $p : F, q : T \therefore  (p \:\Rightarrow\: q) : T$. Again, this gives us no useful information about whether the original statement holds. Baffling? This is because our original statement doesn’t work in both directions. That is, when we check the cards, we are only concerned with whether a vowel on one side implies an even number on the other; /not/ whether an even number on one side implies a vowel on the other side. This would be the /converse/. Later we’ll talk about when both premise implies conclusion and conclusion implies premise. But for this problem order matters

Finally, is the last card /7/ relevant? Can it tell us anything? As it happens, yes. Again, this is a case where we’re dealing with the conclusion and it is false: $q : F$. Which rows deal with a false $q$? Rows two and four. However, we /must/ have the opposite side of /7/ be a consonant (row four); otherwise, the implication statement fails, i.e., $q : F, p : F \therefore (p \:\Rightarrow\: q) : T$ must be the case. Again, we’re using row two to make the decision.

In summary, it didn’t matter what was on the other sides of /K/ and /4/. /K/ was not a make-or-break card, neither, ironically, was /4/ simply because we weren’t checking the statement /conclusion implies premise/. The /7/ was an odd situation, because we needed the false conclusion ($q : F$) to have an accompanying false premise ($p : F$), i.e., an odd card needed to have a consonant reverse side in order for the implication statement to hold. Had it not, the row two would have doomed the statement.

If this is still fuzzy, consider another, possibly plainer situation with the implication statement: /To legally drink alcohol you must be at least 21 years of age/. That is, the premise, /legally drink alcohol/, implies the conclusion, /drinker is at least 21/. So let’s say we are in a bar and on the bar sits a glass of whiskey, next to it, a glass of lemonade, next, an old man drinking /something/ and, next to him, someone in a hoodie who we can’t see drinking scotch. We can immediately rule out the old man---because it doesn’t matter what he is drinking, he could drink alcoholic beverages or not. Also, it doesn’t matter who comes back from the restroom and drinks the lemonade, old enough for alcohol or not. However, it does matter who returns from playing pool and drinks the whiskey, likewise, it matters whether the obscured man is over 21. With the glass of whiskey we have $p : T$, hence, we must have a drinker at least 21, i.e., $q : T$. If not, we have row two, and the implication fails. With the lemonade we have $p : F$, i.e., not alcohol, but then it doesn’t matter if the drinker is at least 21; hence, rows three and four apply, meaning irrelevancy. Same with the old man ($q : T$), which means rows one and three apply, hence, not relevant. But since the obscured man ($q : ?$) is drinking scotch ($p : T$), we must have $q : T$ and not row two, $q : F$.

The next question we might ask is, can we somehow represent this process in Lisp? With Lisp we created the ~implies~ function, using the fact that $(p \:\Rightarrow\: q)$ is the same as $((\neg \: p)  \:\lor \: q)$. Why is this true? Because both versions produce the same truth table. This means both will reach the same conclusions. But then how many instances of the situation must we investigate to know if the implication holds? Perhaps we should understand what exactly needs to be asked....

Let’s start with some way to generate a set for consideration. In the case of the cards, we might generate a deck with each card either a vowel or consonant on one side and the respective even or odd number on the other. Perhaps we flip and shuffle the cards. Then “go through” the deck checking for any card that did not correspond to /vowel implies even/. To make things interesting, we might throw in the occasional game-breaker, i.e., a /consonant-even/ or a /vowel-odd/ card.

In set theory we might describe our deck as /the set of letter-integer pairs such that vowels are paired with even numbers and consonants are paired with odd numbers./ This might be formalized so:

\[
\text{for} \: C_v = \{A,E,I,O,U,Y\} \: \text{and} \: C_c = \{B,C,D,F,G,H,J,K,L,M,N,P,Q,R,S,T,V,W,X,Z\} \\
 \: \text{and} \: C_e = \{2,4,6,8,10,12\}  \: \text{and} \: C_o = \{1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39\} \\
D = \{( | \}
\]



#+begin_src lisp :results silent
(defun wason-deck (lst)
  (let ((wdlst ()))
    (labels ((conso-vowel (lst)
                          
#+end_src




#+begin_src lisp :results silent
(defun lfact (n)
  (labels ((tail-recursive-fact (counter accumulator)
             (if (> counter n)
                 accumulator
                 (tail-recursive-fact (1+ counter)
                                      (* counter accumulator)))))
    (tail-recursive-fact 1 1)))
#+end_src





* Footnotes

[fn:1] ~not~ is /logical not/, i.e., if $x$ is true, then $\neg x$ is the opposite, false. Likewise, if $x$ is false, then $\neg x$ is, again, the opposite, true.

| x | (\neg x) |
| T | F     |
| F | T     |
|   | <c>   |

~or~ is /logical or/, i.e., if $x$ /or/ $y$ is true, then $x \lor y$ is true. This has the [] that both $x$ and $y$ have to be false for $x \lor y$ to be false.

| x | y | (x \lor y) |
| T | T | T       |
| T | F | T       |
| F | T | T       |
| F | F | F       |
|   |   | <c>     |

~and~ is /logical and/, i.e., /both/ $x$ and $y$ must be true for $x \land y$ to be true. In fact, if either or both $x$ and $y$ are false, then $x \land y$ is false. This means $x : T$ /and/ $x : T$ must hold for $x \land y$ to be true

| x | y | (x \land y) |
| T | T | T       |
| T | F | F       |
| F | T | F       |
| F | F | F       |
|   |   | <c>     |


